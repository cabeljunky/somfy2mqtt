[General]

# location of log files (required)
LogLocation = /opt/somfy/log/

# PUT YOUR OWN COORDINATES HERE
# Latitude of the place for computation of sunset and sunrise. 
# check on Google Maps for instance
Latitude = 51.4769

# PUT YOUR OWN COORDINATES HERE
# Longitude of the place for computation of sunset and sunrise. 
# check on Google Maps for instance
Longitude = 0

# Repeat each command a certain number of times. This is to ensure it works
# if the remote is far away from the shutter and sometime EMI prevents a
# signal to go through
# This option only applies if a shutter is raised or lowered in full. If 
# a shutter is only raised or lowered for a given amount of seconds, this
# option does not apply for obvious reasons.
SendRepeat = 2

# (Optional) This parameter specifes the GPIO connector where the 433.42 MHz
# emitter is connected to. The default value is 4
TXGPIO = 4

# This parameter, if true will enable the use of HTTPS
# (secure HTTP) in the Flask web app or user name and password
# authentication, depending on the options below. This option is only
# applicable to the web app. This option requires python-openssl library
# to be installed
UseHttps = False

# (Optional) This parameter will allow the HTTP port to be set by the web
# interface. The default is 80, but this setting will override that
# value. This option is only applicable to the web app.
HTTPPort = 80

# This parameter will override the default port for HTTPS, which is
# 443. Uncomment and change this value to use a non-standard port for HTTPS
HTTPSPort = 443

# Lowest identifier used by the tool to assign unique 24bit 
# ids for new remote. This value won't change in the config file, instead
# the tool will look for the next available address that has not been 
# used yet.
# If you are running more than one instance of PiSomfy you must ensure
# each instance is set to a different value to avoid possible conflicts
RTS_Address = 0x474721

###################################################################
###################################################################
## LIST OF ALL SHUTTERS REGISTERED
###################################################################
###################################################################

[PiGPIO]
# the remote address of the PiGPIO server
PiGPIOHost =

# the remote port of the PiGPIO server
PiGPIOPort =

[MQTT]
# Location (IP Address of DNS Name) of the MQTT Server
MQTT_Server = 

# Port of the MQTT Server
MQTT_Port = 1883

# Username for the MQTT Server
MQTT_User =

# Password of the MQTT Server
MQTT_Password =

# If MQTT Discovery is enabled, simply add the folowing 2 lines to Home
# Assistant's configuration.yaml file:
#
# mqtt:
#   discovery: true

EnableDiscovery = true

# MQTT unique client identifier
# If you are running more than one instance of PiSomfy you must ensure
# each instance is set to a different value to avoid possible conflicts
MQTT_ClientID = somfy2mqtt

# MQTT main topic name
# This the main location where the message will be pushed and will sebscribe on
MQTT_Topic = somfy2mqtt

# MQTT discovery topic name for Home Assistant
MQTT_Discover_Topic = homeassistant

# a string path to the Certificate Authority certificate files that are to be treated as trusted by this client. If this
# is the only option given then the client will operate in a similar manner to a web browser. That is to say it will
# require the broker to have a certificate signed by the Certificate Authorities in ca_certs and will communicate using TLS
# v1, but will not attempt any form of authentication. This provides basic network encryption but may not be sufficient
# depending on how the broker is configured. By default, on Python 2.7.9+ or 3.4+, the default certification authority of
# the system is used. On older Python version this parameter is mandatory.
MQTT_CA = None
# Strings pointing to the PEM encoded client certificate and private keys respectively. If these arguments are not None
#  then they will be used as client information for TLS based authentication. Support for this feature is broker dependent.
#  Note that if either of these files in encrypted and needs a password to decrypt it, Python will ask for the password at
#  the command line. It is not currently possible to define a callback to provide the password.
MQTT_Cert =
MQTT_Key =
# a string specifying which encryption ciphers are allowable for this connection, or None to use the defaults. See the ssl pydoc for more information.
MQTT_AllowedCiphers = None
# Configure verification of the server hostname in the server certificate.
MQTT_VerifyCertificate = false

###################################################################
###################################################################
## LIST OF ALL SHUTTERS REGISTERED
###################################################################
###################################################################
#
# The config value is the address of the remote (must be unique), 
# which is a 24bit identifier (little-endian)
# followed by a comma deliminated list of 
#   - Userfriednly Name
#   - indicator if these remote is active or has been (soft-)deleted
#
[Shutters]


# Indicates the rolling code used by the shutter, based on the address 
# provided in the section [Shutters]. Note that this changes every time 
# the remote is used and therefore the config file will update frequently
#
[ShutterRollingCodes]


# Indicates in % the intermediate position stored in the shutter itself,
# based on the address provided in the section [Shutters].
# Bellow values are assumed to match with shutters internal presets.
# They might be overwritten/cleared by a 5 seconds press on the stop button.
#
[ShutterIntermediatePositions]

###################################################################
###################################################################
## LIST OF ALL AUTOMATED SCHEDULED OPERATIONS
###################################################################
###################################################################
#
# The config value is a unique id identifying the schedule
#
# This is followed by a comma deliminated list representing:
#  -  active: Either 'active', 'paused', 'deleted'
#  -  repeatType: String: 'once' or 'weekday'
#  -  repeatValue: Date in format "YYYY/MM/DD" or Array ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
#  -  timeType: String: 'clock' or 'astro' are valid values
#  -  timeValue: String: Time in format "HH:MM" or values 'sunset' or 'sunrise' or 'sunset+MIN', 'sunset-MIN', 'sunrise+MIN', 'sunrise-MIN'
#  -  shutterAction: String: 'up', 'down' or 'stop' (= My-Position) are valid values. If this is followed by an integer, this indicates the duration of the operation
#  -  shutterIds: Array of shutterIds to operate
#
[Scheduler]

